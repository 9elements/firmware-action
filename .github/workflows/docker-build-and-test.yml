---
# Test built docker images by building simple projects inside them

name: dagger
on:
  pull_request:
    paths:
      - '.dagger-ci'
      - '.github/workflows/docker-build-and-test.yml'
      - 'docker/**'
      - 'tests/**'
  push:
    branches: ['main']
    paths:
      - '.dagger-ci'
      - '.github/workflows/docker-build-and-test.yml'
      - 'docker/**'
      - 'tests/**'
  release:
  schedule:
    # First day of the month at midnight
    - cron: '0 0 1 * 0'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  #=============================
  # Dynamically generate matrix
  #=============================

  get-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: get-matrix
        id: get-matrix
        run: |
          # Disable SC2046: Quote this to prevent word splitting
          # I can't quote this, just look at it
          # shellcheck disable=SC2046
          echo matrix=$( yq --input-format yaml --output-format json '.services | keys[]' docker/compose.yaml | sed 's/"//g' | jq -Rs 'split("\n") | del(.[-1])' | jq -c ) >> "${GITHUB_OUTPUT}"
      - name: Check
        run: |
          jq . <<< '${{ steps.get-matrix.outputs.matrix }}'
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

  get-matrix-coreboot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: get-matrix
        id: get-matrix
        run: |
          # shellcheck disable=SC2046
          echo matrix=$( yq --input-format yaml --output-format json '.services | keys[] | select(. | test("coreboot.*"))' docker/compose.yaml | sed 's/"//g' | jq -Rs 'split("\n") | del(.[-1])' | jq -c ) >> "${GITHUB_OUTPUT}"
      - name: Check
        run: |
          jq . <<< '${{ steps.get-matrix.outputs.matrix }}'
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

  get-matrix-edk2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: get-matrix
        id: get-matrix
        run: |
          # shellcheck disable=SC2046
          echo matrix=$( yq --input-format yaml --output-format json '.services | keys[] | select(. | test("(e|u)dk2.*"))' docker/compose.yaml | sed 's/"//g' | jq -Rs 'split("\n") | del(.[-1])' | jq -c ) >> "${GITHUB_OUTPUT}"
      - name: Check
        run: |
          jq . <<< '${{ steps.get-matrix.outputs.matrix }}'
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

  build:
    name: build_test_publish
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs:
      - get-matrix
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.get-matrix.outputs.matrix) }}
    steps:
      # We have to use my own fork of actions/delete-package-versions at the moment
      #   to have access to 'dry-run' and 'ignore-versions-include-tags' features
      # We can switch to upstream whe following PRs get merged:
      #   - [dry-run](https://github.com/actions/delete-package-versions/pull/119/commits)
      #   - [tags](https://github.com/actions/delete-package-versions/pull/104
      - name: Delete old packages
        uses: AtomicFS/delete-package-versions@main
        continue-on-error:
          true
          # we have continue-on-error because when I make a fork of this repo to debug something,
          # the Docker containers would not build because this step fails to fetch existing containers
          # (in fresh fork there are none)
        with:
          package-name: firmware-action/${{ matrix.dockerfile }}
          package-type: container
          min-versions-to-keep: 5
          ignore-versions:
            '^(main|latest|v(\d+\.?)+)$'
            # ignore:
            # - main
            # - latest
            # - vX
            # - vX.X
            # - vX.X.X
          dry-run: false
          ignore-versions-include-tags: true

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate compose file
        run: docker-compose -f docker/compose.yaml config

      - name: Install python dependencies
        run: pip install -r ./.dagger-ci/daggerci/requirements.txt

      - name: Run dagger pipeline
        # If building coreboot use 120 minutes timeout, otherwise 15 minutes
        timeout-minutes: ${{ startsWith(matrix.dockerfile, 'coreboot_') && 120 || 15 }}
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == 'release' ]] || [[ "${GITHUB_REF}" == *'main' ]] || [[ "${GITHUB_REF_TYPE}" == 'tag' ]]; then
            echo "Enable publishing"
            python .dagger-ci/daggerci/main.py -d ${{ matrix.dockerfile }} --publish
          else
            echo "Disable publishing"
            python .dagger-ci/daggerci/main.py -d ${{ matrix.dockerfile }}
          fi
        shell: bash
        env:
          GITHUB_REGISTRY: ${{ env.REGISTRY }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
