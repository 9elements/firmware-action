---
name: 'Compile open firmware solution'
description: |
  Compile a selected firmware solution like coreboot, EDKII, OpenBMC and more
  The generated files will be placed in $GITHUB_WORKSPACE/build/
author: '9elements'
inputs:
  target:
    description: |
      The firmware stack to build.
      One of the following:
        - coreboot
        - linux
        - edk2
        - fsp
    required: true
  #-------------------------------
  # Inputs common for all targets
  sdk_version:
    description: |
      *sdk_version* specifies the docker toolchain tag to use
      when building the image. This has an influence on the
      IASL, GCC and host GCC version that is used to build
      the target.
      You must match the source level and sdk_version.
      *Note:* Updating the sdk_version might result in different
      binaries using the same source code.
      For example:
        coreboot_4.19:main
        coreboot_4.19:latest
        edk2-stable202111:latest
      See https://github.com/orgs/9elements/packages
    required: true
  architecture:
    description: |
      *architecture* specifies target architecture, such as:
      for coreoot or linux:
        - 'x86'
        - 'arm64'
      for edk2:
        - 'X64'
      for FSP:
        - '' (this input is unsed)
    required: true
  repo_path:
    description: |
      *repo_path* gives the (relative) path to the target (firmware) repository.
      If the current repository contains the selected target, specify: '.'
      Otherwise the path should point to the target (firmware) repository
      submodule that had previously been checked out.
    required: true
  defconfig_path:
    description: |
      *defconfig_path* gives the (relative to repo_path) path to the defconfig that
      should be used to build the target.
      For coreboot and linux this is a defconfig.
      For EDK2 this is a one-line file containing the build arguments
        such as '-t GCC5 -D BOOTLOADER=COREBOOT -D TPM_ENABLE=TRUE -D NETWORK_IPXE=TRUE'.
        Some arguments will be added automatically from action inputs:
          '-a <architecture>'
          '-p <edk2__platform>'
          '-b <edk2__release_type>'
      For FSP this is a one-line file containing the build arguments later exported as
        environment variable 'FSP_BUILD_OPTION_PCD'
    required: true
  output:
    description: |
      *output* specifies the (relative) path where to place the produced files or directories.
    required: true

  #-------------------------------
  # Inputs specific for coreboot target
  coreboot__payload_file_path:
    description: |
      *coreboot__payload_file_path* gives the (relative) path to the payload.
      Depending on the defconfig it may not be added to the ROM.
      In a 'coreboot' build:
        The file will be placed at
        `3rdparty/blobs/mainboard/$(MAINBOARDDIR)/payload`.
        The Kconfig `CONFIG_PAYLOAD_FILE` will point to the same path.
    required: false
  coreboot__blob_intel_ifd_path:
    description: |
      *coreboot__blob_intel_ifd_path* gives the (relative) path to the Intel
      Flash descriptor binary.
      In a 'coreboot' build:
        The file will be placed at
        `3rdparty/blobs/mainboard/$(CONFIG_MAINBOARD_DIR)/descriptor.bin`.
        The Kconfig `CONFIG_IFD_BIN_PATH` will point to the same
        path.
      Depending on the defconfig it may not be added to the ROM.
    required: false
  coreboot__blob_intel_me_path:
    description: |
      *coreboot__blob_intel_me_path* gives the (relative) path to the Intel
      Management engine binary.
      In a 'coreboot' build:
        The file will be placed at
        `3rdparty/blobs/mainboard/$(CONFIG_MAINBOARD_DIR)/me.bin`.
        The Kconfig `CONFIG_ME_BIN_PATH` will point to the same
        path.
      Depending on the defconfig it may not be added to the ROM.
    required: false
  coreboot__blob_intel_gbe_path:
    description: |
      *coreboot__blob_intel_gbe_path* gives the (relative) path to the Intel
      Gigabit Ethernet engine binary.
      In a 'coreboot' build:
        The file will be placed at
        `3rdparty/blobs/mainboard/$(CONFIG_MAINBOARD_DIR)/gbe.bin`.
        The Kconfig `CONFIG_GBE_BIN_PATH` will point to the same
        path.
      Depending on the defconfig it may not be added to the ROM.
    required: false
  coreboot__fsp_binary_path:
    description: |
      *coreboot__fsp_binary_path* gives the (relative) path to the Intel
      FSP binary.
      In a 'coreboot' build:
        The file will be placed at
        `3rdparty/blobs/mainboard/$(CONFIG_MAINBOARD_DIR)/Fsp.fd`.
        The Kconfig `CONFIG_FSP_FD_PATH` will point to the same
        path.
    required: false
  coreboot__fsp_header_path:
    description: |
      *coreboot__fsp_header_path* gives the (relative) path to the Intel
      FSP header folder.
      In a 'coreboot' build:
        The files will be placed at
        `3rdparty/blobs/mainboard/$(CONFIG_MAINBOARD_DIR)/Include`.
        The Kconfig `CONFIG_FSP_HEADER_PATH` will point to the same
        path.
    required: false

  #-------------------------------
  # Inputs specific for edk2 target or edk2 pyaload
  edk2__platform:
    description: |
      *edk2__platform* specifies the DSC to use when building EDK2.
      For example:
        UefiPayloadPkg/UefiPayloadPkg.dsc
    required: false
  edk2__release_type:
    description: |
      *edk2__release_type* specifies the build type to use when building EDK2.
      Defaults to DEBUG.
      Supported options:
        - RELEASE
        - DEBUG
    required: false
    default: DEBUG

  #-------------------------------
  # Inputs specific for Intel FSP target
  fsp__release_type:
    description: |
      *fsp__release_type* specifies the build type to use when building Intel FSP.
      For example:
        - d32
        - r32
    required: false
  fsp__build_cmd:
    description:
      *fsp__build_cmd* specifies the build command along with arguments.
      For example:
        'Intel/<arch>/build.sh <arch> GCC5'
    required: false

runs:
  using: 'node16'
  main: 'dist/invoke-action.js'
