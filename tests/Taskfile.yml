---
version: '3'
vars:
  WORKDIR: '.example_runs'

tasks:
  mkdir:
    desc: Make working directory for examples
    internal: true
    cmds:
      - mkdir -p '{{.WORKDIR}}'
    status:
      - test -d '{{.WORKDIR}}'

  #=======
  # LINUX
  #=======
  linux-fetch:
    desc: Fetch Linux source code
    internal: true
    dir: '{{.WORKDIR}}'
    vars:
      LINUX_MAJOR_VERSION:
        sh: echo '{{.LINUX_VERSION}}' | sed -E 's/\..*//g'
    cmds:
      # Download source files
      - wget --quiet --continue "https://cdn.kernel.org/pub/linux/kernel/v{{.LINUX_MAJOR_VERSION}}.x/linux-{{.LINUX_VERSION}}.tar.xz"
      - wget --quiet --continue "https://cdn.kernel.org/pub/linux/kernel/v{{.LINUX_MAJOR_VERSION}}.x/linux-{{.LINUX_VERSION}}.tar.sign"
      - unxz --keep "linux-{{.LINUX_VERSION}}.tar.xz" >/dev/null
      # Verify GPG signature
      - gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
      - gpg2 --verify "linux-{{.LINUX_VERSION}}.tar.sign"
      # Extract
      - tar -xvf "linux-{{.LINUX_VERSION}}.tar"
    requires:
      vars: [LINUX_VERSION]
    status:
      - test -d 'linux-{{.LINUX_VERSION}}'

  linux-run:
    desc: Run firmware-action
    dir: '{{.WORKDIR}}'
    internal: true
    cmds:
      - cp -f "../tests/linux_{{.LINUX_VERSION}}/linux.defconfig" "ci_defconfig"
      - ../bin/firmware-action build --config="../tests/example_config__linux.json" --target=linux-example
    env:
      LINUX_VERSION: '{{.LINUX_VERSION}}'
      SYSTEM_ARCH: 'amd64'
      UROOT_VERSION: ''
    requires:
      vars: [LINUX_VERSION]

  linux-run-github:
    desc: Run firmware-action just like in GitHub runner
    dir: '{{.WORKDIR}}'
    internal: true
    cmds:
      - cp -f "../tests/linux_{{.LINUX_VERSION}}/linux.defconfig" "ci_defconfig"
      - ../bin/firmware-action
    env:
      LINUX_VERSION: '{{.LINUX_VERSION}}'
      SYSTEM_ARCH: 'amd64'
      UROOT_VERSION: ''
      # Fake GitHub runner
      GITHUB_ACTIONS: 'yes'
      INPUT_TARGET: 'linux-example'
      INPUT_RECURSIVE: 'false'
      # For testing multiple config inputs
      #INPUT_CONFIG: "  ../tests/example_config__linux.json\n  ../tests/example_config__uroot.json  \n   "
      INPUT_CONFIG: '../tests/example_config__linux.json'
    requires:
      vars: [LINUX_VERSION]

  linux-local-*:
    desc: Run example as it would run locally
    deps:
      - task: mkdir
      - task: :build-go-binary
    vars:
      VARIANT: '{{index .MATCH 0}}'
    cmds:
      - if [[ -f '{{.WORKDIR}}/output-linux' ]]; then trash '{{.WORKDIR}}/output-linux'; fi
      - task: linux-fetch
        vars:
          LINUX_VERSION: '{{.VARIANT}}'
      - task: linux-run
        vars:
          LINUX_VERSION: '{{.VARIANT}}'

  linux-github-*:
    desc: Run example as it would run in GitHub CI
    deps:
      - task: mkdir
      - task: :build-go-binary
    vars:
      VARIANT: '{{index .MATCH 0}}'
    cmds:
      - task: linux-fetch
        vars:
          LINUX_VERSION: '{{.VARIANT}}'
      - task: linux-run-github
        vars:
          LINUX_VERSION: '{{.VARIANT}}'

  #========
  # U-BOOT
  #========
  uboot-fetch:
    desc: Fetch u-boot source code
    internal: true
    dir: '{{.WORKDIR}}'
    cmds:
      - git clone https://source.denx.de/u-boot/u-boot.git "uboot-{{.UBOOT_VERSION}}"
      - cd u-boot && git fetch -a && git checkout "{{.UBOOT_VERSION}}"
    requires:
      vars: [UBOOT_VERSION]
    status:
      - test -d 'uboot-{{.UBOOT_VERSION}}'

  uboot-run:
    desc: Run firmware-action
    dir: '{{.WORKDIR}}'
    internal: true
    cmds:
      - cp -f "../tests/uboot_{{.UBOOT_VERSION}}/uboot.defconfig" "uboot_defconfig"
      - ln -sf "uboot-{{.UBOOT_VERSION}}" u-boot
      - ../bin/firmware-action build --config="../tests/example_config__uboot.json" --target=u-boot-example
    env:
      UBOOT_VERSION: '{{.UBOOT_VERSION}}'
      SYSTEM_ARCH: 'arm64'
    requires:
      vars: [UBOOT_VERSION]

  uboot-*:
    desc: Run example
    deps:
      - task: mkdir
      - task: :build-go-binary
    vars:
      VARIANT: '{{index .MATCH 0}}'
    cmds:
      - if [[ -f '{{.WORKDIR}}/output-uboot' ]]; then trash '{{.WORKDIR}}/output-linux'; fi
      - task: uboot-fetch
        vars:
          UBOOT_VERSION: '{{.VARIANT}}'
      - task: uboot-run
        vars:
          UBOOT_VERSION: '{{.VARIANT}}'
